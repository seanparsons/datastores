package com.github.seanparsons.datastores

import org.scalacheck.Prop._
import org.scalacheck.Gen._
import org.scalacheck.Gen
import org.scalacheck.Arbitrary._
import org.scalacheck.Choose._
import org.scalacheck.Choose
import scalaz._
import Scalaz._
import scala.math.Numeric.Implicits
import org.specs2.{Specification, ScalaCheck}
import java.io.File

case class FixedSizeIndexedStoreSpecification() extends Specification 
						with ScalaCheck 
						with Serializers 
						with Deserializers 
						with FixedSizes {
						  
	private[this] def createTe
  def fixedSizeIndexedStoreSpec = 
    "FixedSizeIndexedStore" ^
      "Any long value" !
        forAllNoShrink(arbitrary[Long], chooseNum[Int](0, 2000)){(value, index) =>
      	  
          
      	  ("deserialized = " + deserialized) |: deserialized â‰Ÿ long
        } ^ 
        
        
        end

}
